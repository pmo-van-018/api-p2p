/**
 * events
 * ---------------------
 * Define all your possible custom events here.
 */
export const events = {
  objects: {
    user: 'user',
    operation: 'operation',
    policy: 'policy',
    order: 'order',
    system: 'system',
    appeal: 'appeal',
    notification: 'notification',
    supportRequest: 'supportRequest',
  },
  actions: {
    admin: {
      onSettingManagerGasless: 'onSettingManagerGasless',
    },
    operation: {
      created: 'onOperationCreated',
      blocked: 'onUserBlocked',
      deactivated: 'onUserDeactivated',
      deleted: 'onUserDeleted',
      deletePaymentMethodByManager: 'deletePaymentMethodByManager',
      updatePaymentMethodByManager: 'updatePaymentMethodByManager',
      onSwapWalletAddressByManager: 'onSwapWalletAddressByManager',
      onSwapWalletAddressByAdmin: 'onSwapWalletAddressByAdmin',
      onManagerUpdateAvatar: 'onManagerUpdateAvatar',
    },
    user: {
      created: 'onUserCreated',
      blocked: 'onUserBlocked',
      deactivated: 'onUserDeactivated',
      deleted: 'onUserDeleted',
      statistic: 'onUserStatistic',
      active: 'active',
      activeManager: 'activeManager',
      deacvivatedWithoutOrder: 'deacvivatedWithoutOrder',
    },
    operator: {
      deactivatedFromAdmin: 'onOperatorDeactivatedFromAdmin',
      activatedFromAdmin: 'onOperatorActivatedFromAdmin',
      activatedFromManager: 'onOperatorActivatedFromManager',
      activatedSupporterFromAdmin: 'onAdminSupporterActivatedFromSuperAdmin',
      activatedSuperAdmin: 'activatedSuperAdmin',
      onlinePostByManager: 'onOnlinePostByManager',
      offlinePostByManager: 'onOfflinePostByManager',
    },
    supporter: {
      deactivatedFromAdmin: 'onSupporterDeactivatedFromAdmin',
      activatedFromAdmin: 'onSupporterActivatedFromAdmin',
      activatedFromManager: 'onSupporterrActivatedFromManager',
    },
    policy: {
      created: 'onPolicyCreate',
    },
    order: {
      buy: {
        userCreateBuyOrder: 'onUserCreateBuyOrder',
        userConfirmPayment: 'onUserConfirmPayment',
        merchantConfirmPayment: 'onMerchantConfirmPayment',
        userCancelled: 'onUserCancelled',
        merchantSubmitTransaction: 'onMerchantSubmitTransaction',
        systemUpdateStep: 'onSystemUpdateStepBuyOrder',
        systemUpdateTransactionStatus: 'onSystemUpdateTransactionStatusBuyOrder',
        systemUpdateAppealTimeout: 'onSystemUpdateAppealTimeout',
        systemCancelOrder: 'onSystemCancelOrder',
        systemFinishOrder: 'onSystemFinishOrderBuyOrder',
        operatorCreateChatRoom: 'onOperatorCreateChatRoomBuyOrder',
        adminAddToBacklist: 'onAdminAddToBacklistBuyOrder',
      },
      sell: {
        userCreateOrder: 'onUserCreateSellOrder',
        merchantConfirmSentPayment: 'onMerchantConfirmSentPayment',
        merchantCreatePaymentTicket: 'onMerchantCreatePaymentTicket',
        merchantCancelPaymentTicket: 'onMerchantCancelPaymentTicket',
        merchantPickPaymentTicket: 'onMerchantPickPaymentTicket',
        userSubmitTransaction: 'onUserSubmitTransaction',
        userConfirmReceived: 'onUserConfirmReceived',
        userCancelOrder: 'onUserCancelSellOrder',
        systemCancelOrder: 'onSystemCancelSellOrder',
        systemUpdateStepOrder: 'onSystemUpdateStepSellOrder',
        systemFinishOrder: 'onSystemFinishOrderSellOrder',
        systemUpdateTransactionStatus: 'onSystemUpdateTransactionStatusSellOrder',
        operatorCreateChatRoom: 'onOperatorCreateChatRoomSellOrder',
        adminAddToBacklist: 'onAdminAddToBacklistSellOrder',
        rpcUnknowError: 'onRpcUnknowError',
        userRequestTransactionConfirmation: 'onUserRequestTransactionConfirmation',
        cancelOrderByAdminSupporter: 'onCancelOrderByAdminSupporter',
      },
    },
    appeal: {
      // Buy
      userCreateAppeal: 'onUserCreateAppeal',
      extraTimeBuyAppeal: 'onExtraTimeBuyAppeal',
      userBuyAppeal: 'onUserBuyAppeal',
      closeAppealInBuy: 'oncloseAppealInBuy',
      resultBuyAppealUserWin: 'onResultBuyAppealUserWin',
      resultBuyAppealMerchantWin: 'onResultBuyAppealMerchantWin',
      closeBuyAppealNotEvident: 'onCloseBuyAppealNotEvident',
      reopenBuyAppealUserWin: 'onReopenBuyAppealUserWin',
      // Sell
      userSellAppeal: 'onUserSellAppeal',
      extraTimeSellAppeal: 'onExtraTimeSellAppeal',
      closeSellAppeal: 'onCloseSellAppeal',
      resultSellAppealMerchantWin: 'onResultSellAppealMerchantWin',
      resultSellAppealUserWin: 'onResultSellAppealUserWin',
      supporterReceiveAppealOrder: 'onSupporterReceiveAppealOrder',
      supporterResolveAppealOrder: 'onSupporterResolveAppealOrder',
      closeAppeal: 'onCloseAppeal',
      adminSupporterPickAppeal: 'onAdminSupporterPickAppeal',
      adminCancelAppealSession: 'onAdminCancelAppealSession',
      // Common
      userAgreeToMerchant: 'onUserAgreeToMerchant',
    },
    system: {
      availableAmountLessThanMinAmount: 'onAvailableAmountLessThanMinAmount',
      deletePaymentMethodWithMerchant: 'onDeletePaymentMethodWithMerchant',
      deletePaymentMethodAdsToOffline: 'onDeletePaymentMethodAdsToOffline',
      availableAmountEqualZero: 'onAvailableAmountEqualZero',
      disablePaymentMethodWithAdmin: 'disablePaymentMethodWithAdmin',
      disableAssetByAdmin: 'disableAssetByAdmin',
      adminUpdateSystemConfig: 'onAdminUpdateSystemConfig',
    },
    supportRequest: {
      createNewSupportRequest: 'onCreateNewSupportRequest',
      supportRequestPicked: 'onSupportRequestPicked',
      resolvedSupportRequest: 'onResolvedSupportRequest',
    },
    post: {
      managerUpdatePost: 'managerUpdatePost',
    },
    twoFactorAuth: {
      userRegistered: 'userRegistered2FA',
      userUnregistered: 'userUnregistered2FA',
      operationRegistered: 'operationRegistered2FA',
      operationUnregistered: 'operationUnregistered2FA',
    },
    cryptoTransaction: {
      missingTransaction: 'onMissingTransaction',
    },
    balanceConfig: {
      updateBalanceConfig: 'onUpdateBalanceConfig',
      reachedThreshold: 'onReachedThreshold',
    },
  },
};
