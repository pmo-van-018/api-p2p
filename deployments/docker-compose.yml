version: "3.7"
name: p2pd-compose
services:
  redpanda:
    container_name: redpanda
    image: redpandadata/redpanda:v23.2.17
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
    ports:
      - "18081:18081"
      - "18082:18082"
      - "19092:19092"
      - "19644:9644"
    volumes:
      - redpanda:/var/lib/redpanda/data
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1" ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s

  console:
    container_name: redpanda-console
    image: redpandadata/console:v2.3.7
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    depends_on:
      - redpanda
    ports:
      - "8080:8080"
    restart: on-failure

  mysql:
      image: "mysql:latest"
      container_name: p2pd-mysql
      environment:
          MYSQL_ROOT_PASSWORD: "${TYPEORM_PASSWORD}"
          MYSQL_DATABASE: "${TYPEORM_DATABASE}"
          MYSQL_PASSWORD: "${TYPEORM_PASSWORD}"
          MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      ports:
          - "${TYPEORM_PORT:-3306}:3306"
      volumes:
          - "backendmysql:/var/lib/mysql"
          - "./conf/mysql/my.cnf:/etc/mysql/my.cnf"
      networks:
          - backend
      healthcheck:
          test: ["CMD", "mysqladmin", "ping"]

  redis:
      image: "redis:latest"
      container_name: p2pd-redis
      ports:
          - "${REDIS_PORT:-6379}:6379"
      volumes:
          - "backendredis:/data"
          - "./conf/redis/redis.conf:/usr/local/etc/redis/redis.conf"
      networks:
          - backend
      command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
      healthcheck:
          test: ["CMD", "redis-cli", "ping"]

networks:
    backend:

volumes:
    backendmysql:
        driver: local
    backendredis:
        driver: local
    redpanda:
        driver: local
